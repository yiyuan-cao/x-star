(** VST-IDE syntax *)
needs "seplogic.hl";;

(* Notations for parsing and printing separation logic assertions in VST-IDE *)
let () = 
  parse_as_binder "exists";
  parse_as_binder "forall";
  parse_as_infix ("|--", (2, "right"));
  parse_as_infix ("--||--", (2, "right"));
  parse_as_infix ("-->", (4, "right"));
  parse_as_infix ("-*", (4, "right"));
  parse_as_infix ("||", (6, "right"));
  parse_as_infix ("**", (8, "right"));
  parse_as_infix ("&&", (8, "right"))
;;

let add_overload_skeleton (s, ty) =
  the_overload_skeletons := (s, ty) :: !the_overload_skeletons
;;

let () = 
  new_type_abbrev("Assertion", `:HPROP`)
;;

(* Overloading OR, AND *)
let () = 
  override_interface("||", `(\/)`);
  override_interface("&&", `(/\)`);
  add_overload_skeleton("||", `:A->A->A`);
  add_overload_skeleton("&&", `:A->A->A`);
  overload_interface("||", `SEPOR`);
  overload_interface("&&", `SEPAND`)
;;

(* TODO: Overloading EXISTS, FORALL.
   Only constant declaration now. *)
let () = 
  new_constant("exists", `:(A->Assertion)->Assertion`);
  new_constant("forall", `:(A->Assertion)->Assertion`);
  add_overload_skeleton ("exists", `:(A->B)->B`);
  add_overload_skeleton ("forall", `:(A->B)->B`)
;;

(* Separation logic *)
let () = 
  do_list override_interface 
  [ "TT", `SEPTRUE`;
    "-->", `SEPIMPL`;
    "emp", `EMP`;
    "**", `SEPCONJ`;
    "-*", `SEPWAND`;
    "iter_sepcon", `SEPITER`;
    "|--", `SEPENTAIL`;
    "--||--", `SEPIFF` ]
;;

(* Big-endian representation of n-bytes integer `Z` at `addr`, 
   and data-at predicates for C primitive types.
   SHOULD NOT BE USED BY USERS DIRECTLY *) 
let () = 
  do_list override_interface
  [ "store_byte", `MEM_STORE_BYTE`;
    "store_2byte", `MEM_STORE_2BYTES`;
    "store_4byte", `MEM_STORE_4BYTES`;
    "store_8byte", `MEM_STORE_8BYTES` ]
;;

let () = 
  do_list override_interface
  [ "store_char", `DATA_AT_CHAR`;
    "undef_store_char", `DATA_AT_CHAR_ANY`;
    "store_uchar", `DATA_AT_UCHAR`;
    "undef_store_uchar", `DATA_AT_UCHAR_ANY`;
    "store_short", `DATA_AT_SHORT`;
    "undef_store_short", `DATA_AT_SHORT_ANY`;
    "store_ushort", `DATA_AT_USHORT`;
    "undef_store_ushort", `DATA_AT_USHORT_ANY`;
    "store_int", `DATA_AT_INT`;
    "undef_store_int", `DATA_AT_INT_ANY`;
    "store_uint", `DATA_AT_UINT`;
    "undef_store_uint", `DATA_AT_UINT_ANY`;
    "store_ptr", `DATA_AT_PTR`;
    "undef_store_ptr", `DATA_AT_PTR_ANY` ]
;;

(* Data-at predicates for C primitive types in VST-IDE.
   USER-LEVEL predicates defined on top of MEM_STORE_BYTE, etc. *)
let c_type = define_type "c_type = Tchar|Tuchar|Tshort|Tushort|Tint|Tuint|Tint64|Tuint64|Tptr";;

let DATA_AT_DEF = 
  define `
    !(ptr:PTR) (v:Z).
      data_at (ptr, Tchar, v) = DATA_AT_CHAR (ptr, v) /\
      data_at (ptr, Tuchar, v) = DATA_AT_UCHAR (ptr, v) /\
      data_at (ptr, Tshort, v) = DATA_AT_SHORT (ptr, v) /\
      data_at (ptr, Tushort, v) = DATA_AT_USHORT (ptr, v) /\
      data_at (ptr, Tint, v) = DATA_AT_INT (ptr, v) /\
      data_at (ptr, Tuint, v) = DATA_AT_UINT (ptr, v) /\
      data_at (ptr, Tuint64, v) = DATA_AT_SIZE_T (ptr, v) /\
      data_at (ptr, Tptr, v) = DATA_AT_PTR (ptr, v)
  `
;;

let UNDEF_DATA_AT_DEF = 
  define `
    !(ptr:PTR).
      undef_data_at (ptr, Tchar) = DATA_AT_CHAR_ANY (ptr) /\
      undef_data_at (ptr, Tuchar) = DATA_AT_UCHAR_ANY (ptr) /\
      undef_data_at (ptr, Tshort) = DATA_AT_SHORT_ANY (ptr) /\
      undef_data_at (ptr, Tushort) = DATA_AT_USHORT_ANY (ptr) /\
      undef_data_at (ptr, Tint) = DATA_AT_INT_ANY (ptr) /\
      undef_data_at (ptr, Tuint) = DATA_AT_UINT_ANY (ptr) /\
      undef_data_at (ptr, Tuint64) = DATA_AT_SIZE_T_ANY (ptr) /\
      undef_data_at (ptr, Tptr) = DATA_AT_PTR_ANY (ptr)
  `
;;